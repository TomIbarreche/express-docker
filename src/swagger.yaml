definition:
  openapi: 3.0.0
  info:
    title: Epic Road Trip Api
    description: Everything is in the title
    version: 0.1.0
  servers:
    - url : "http://localhost:5000/"

  tags:
    - name: Auth
      description: route for authentification
    - name: Users
      description: route for users

  paths:
    /api/v1/signUp:
      post:
        summary: Create a new user
        tags: [Auth]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUser'
        responses:
          201:
            description: success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetUser'
          400:
            description: something went wrong
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiError'
          500:
            description: something went wrong
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiError'
    /api/v1/signIn:
      post:
        summary: User sign in
        tags: [Auth]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInUser'
        responses:
          201:
            description: success log in
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetUser'
          400:
            description: bad request
          401:
            description: bad password
          404:
            description: user not found
          500:
            description: something went wrong 
    /api/v1/users:
      get:
        summary: Return all users
        tags: [Users]
        responses:
          201:
            description: list is good
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/GetUser'
          500:
            description: something went wrong
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiError'
    /api/v1/users/{id}:
      get:
        summary: Get user by id
        tags: [Users]
        parameters:
            - $ref: '#/components/parameters/userId'
        responses:
            201:
                description: success
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetUser'
            404:
                description: The user wasnt found
            500:
                description: An error occurs
      put:
        summary: Update the user by id
        tags: [Users]
        parameters:
            - $ref: '#/components/parameters/userId'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUser'
        responses:
            201:
                description: the user was updated
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GetUser'
            400:
                description: Malform request
            404:
                description: can't find the user
            500:
                description: Something went wrong
        summary: Delete the user by Id
        tags: [Users]
        parameters:
            - $ref: '#/components/parameters/userId'
        responses:
            201:
              description: The user as been deleted
              content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        id:
                          type: string
                          description: user id that has been deleted
            404:
                description: Cannot find the user
            500:
              description: an error occured
  components:
    parameters:
      userId:
        name: id
        in: path
        required: true
        description: The id of the user
        schema:
          type: string
    schemas:
      GetUser:
        type: object
        required:
          - id
          - first_name
          - email
          - age
        properties:
          id:
            type: string  
            description: Id of the user
          first_name: 
            type: string
            description: Name of the user
          email: 
            type: string
            description: email of the user
          age: 
            type: int
            description: age of the user
        example:
          id: 1
          first_name: Tom
          email: tom@tom.fr
          age: 25
      SignUpUser:
        type: object
        required:
          - first_name
          - email
          - age
          - password
        properties:
          id:
            type: string  
            description: Id of the user
          first_name: 
            type: string
            description: Name of the user
          email: 
            type: string
            description: email of the user
          age: 
            type: int
            description: age of the user
          password:
            type: string
            description: password of the user
        example:
          first_name: Tom
          email: tom@tom.fr
          age: 25
          password: myPassword
      SignInUser:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            description: email of the user
          password:
            type: string
            description: password of the user
        example:
          email: tom@tom.fr
          password: myPassword
      ApiError:
        type: object
        required:
          - code
          - message
        properties:
          code:
            type: integer
            description: code error
          message:
            type: string
            description: message of the error
        example:
          code: 400
          message: Bad request

apis: ["S:/Dev/Node/Testing/src/route/*.js"]